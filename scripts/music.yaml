playlist_mopidy:
  sequence:
    - event: JARVIS_PLAYLIST
      event_data_template:
        playlist: "{{ playlist_name }}"
    # - service: media_player.shuffle_set
    #   entity_id: media_player.mopidy
    #   data:
    #     shuffle: 'true'
    # - service: media_player.repeat_set
    #   entity_id: media_player.mopidy
    #   data:
    #     repeat: 'true'
    # - service: shell_command.get_playlist
    #   data_template:
    #     arguments: "{{ playlist }}"
    # - service: shell_command.jarvis_says
    #   data_template:
    #     speech: '"OK, playing {{ states("sensor.mopidy_playlist") |replace("(by topsify)","") }} playlist"'
    # - delay: 00:00:03
    # - service: media_player.play_media
    #   data_template:
    #     entity_id: media_player.mopidy
    #     media_content_type: playlist
    #     media_content_id: >-
    #       {{ states('sensor.mopidy_playlist') }}
    #   entity_id: media_player.mopidy
    # - service: media_player.media_next_track
    #   entity_id: media_player.mopidy

artist_mopidy:
  sequence:
    event: JARVIS_ARTIST
    event_data_template:
      artist: "{{ artist }}"

song_mopidy:
  sequence:
    event: JARVIS_SONG
    event_data_template:
      artist: "{{ artist }}"
      song: "{{ song }}"

    # - service: media_player.shuffle_set
    #   entity_id: media_player.mopidy
    #   data:
    #     shuffle: 'true'
    # - service: media_player.repeat_set
    #   data:
    #     repeat: 'true'
    # - service: shell_command.get_artist
    #   data_template:
    #     arguments: >-
    #       '"{{ artist }}"'
    # - service: shell_command.jarvis_says
    #   data_template:
    #     speech: '"OK, playing music by {{ states("sensor.mopidy_playlist") }}"'
    # - delay: 00:00:03

resume_mopidy:
  sequence:
    - condition: state
      entity_id: media_player.mopidy
      state: "paused"
    - service: shell_command.jarvis_says
      data:
        speech: '"OK, resuming music"'
    - delay: 00:00:03
    - service: media_player.media_play
      entity_id: media_player.mopidy

pause_mopidy:
  sequence:
    - condition: state
      entity_id: media_player.mopidy
      state: "playing"
    - service: media_player.media_pause
      entity_id: media_player.mopidy
    - delay: 00:00:01
    - service: shell_command.jarvis_says
      data:
        speech: '"OK, pausing music"'

volume_up_mopidy:
  sequence:
    - service: media_player.volume_up
      entity_id: media_player.mopidy
    - service: media_player.volume_up
      entity_id: media_player.mopidy

volume_down_mopidy:
  sequence:
    - service: media_player.volume_down
      entity_id: media_player.mopidy
    - service: media_player.volume_down
      entity_id: media_player.mopidy

next_track_mopidy:
  sequence:
    - service: media_player.media_next_track
      entity_id: media_player.mopidy
    - service: shell_command.jarvis_says
      data:
        speech: '"OK, skipping track"'

previous_track_mopidy:
  sequence:
    - service: media_player.media_previous_track
      entity_id: media_player.mopidy
    - service: shell_command.jarvis_says
      data:
        speech: '"OK, playing the previous track"'

play_christmas:
  sequence:
    - service: media_player.play_media
      entity_id: media_player.mopidy
      data:
        entity_id: media_player.mopidy
        media_content_type: playlist
        media_content_id: 'Christmas Playlist (by filtr)'
    - service: shell_command.jarvis_says
      data:
        speech: '"OK, playing christmas playlist"'

play_altpop:
  sequence:
    - service: media_player.play_media
      entity_id: media_player.mopidy
      data:
        entity_id: media_player.mopidy
        media_content_type: playlist
        media_content_id: 'Adult Alternative (by topsify)'
    - service: shell_command.jarvis_says
      data:
        speech: '"OK, playing alternative playlist"'
